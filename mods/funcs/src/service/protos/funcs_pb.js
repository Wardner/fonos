// source: funcs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$openapiv2_options_annotations_pb);
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.DeleteFuncRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.DeployFuncRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.DeployStream', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.Func', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.FuncLog', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.GetFuncLogsRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.GetFuncRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.ListFuncsRequest', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.ListFuncsResponse', null, global);
goog.exportSymbol('proto.fonoster.funcs.v1beta1.Resource', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.ListFuncsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.ListFuncsRequest.displayName = 'proto.fonoster.funcs.v1beta1.ListFuncsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.funcs.v1beta1.ListFuncsResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.ListFuncsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.ListFuncsResponse.displayName = 'proto.fonoster.funcs.v1beta1.ListFuncsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.GetFuncLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.displayName = 'proto.fonoster.funcs.v1beta1.GetFuncLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.GetFuncRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.GetFuncRequest.displayName = 'proto.fonoster.funcs.v1beta1.GetFuncRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.DeployFuncRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.DeployFuncRequest.displayName = 'proto.fonoster.funcs.v1beta1.DeployFuncRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.DeleteFuncRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.DeleteFuncRequest.displayName = 'proto.fonoster.funcs.v1beta1.DeleteFuncRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.displayName = 'proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.displayName = 'proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.Func = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.Func, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.Func.displayName = 'proto.fonoster.funcs.v1beta1.Func';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.Resource.displayName = 'proto.fonoster.funcs.v1beta1.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.FuncLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.FuncLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.FuncLog.displayName = 'proto.fonoster.funcs.v1beta1.FuncLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.funcs.v1beta1.DeployStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.funcs.v1beta1.DeployStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.funcs.v1beta1.DeployStream.displayName = 'proto.fonoster.funcs.v1beta1.DeployStream';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.ListFuncsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    view: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsRequest}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.ListFuncsRequest;
  return proto.fonoster.funcs.v1beta1.ListFuncsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsRequest}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 3:
      var value = /** @type {!proto.fonoster.common.v1beta1.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.ListFuncsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fonoster.common.v1beta1.View view = 3;
 * @return {!proto.fonoster.common.v1beta1.View}
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.getView = function() {
  return /** @type {!proto.fonoster.common.v1beta1.View} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.fonoster.common.v1beta1.View} value
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.ListFuncsRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.ListFuncsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcsList: jspb.Message.toObjectList(msg.getFuncsList(),
    proto.fonoster.funcs.v1beta1.Func.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsResponse}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.ListFuncsResponse;
  return proto.fonoster.funcs.v1beta1.ListFuncsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsResponse}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.funcs.v1beta1.Func;
      reader.readMessage(value,proto.fonoster.funcs.v1beta1.Func.deserializeBinaryFromReader);
      msg.addFuncs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.ListFuncsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.funcs.v1beta1.Func.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Func funcs = 1;
 * @return {!Array<!proto.fonoster.funcs.v1beta1.Func>}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.getFuncsList = function() {
  return /** @type{!Array<!proto.fonoster.funcs.v1beta1.Func>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.funcs.v1beta1.Func, 1));
};


/**
 * @param {!Array<!proto.fonoster.funcs.v1beta1.Func>} value
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} returns this
*/
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.setFuncsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.funcs.v1beta1.Func=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.funcs.v1beta1.Func}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.addFuncs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.funcs.v1beta1.Func, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} returns this
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.clearFuncsList = function() {
  return this.setFuncsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.ListFuncsResponse} returns this
 */
proto.fonoster.funcs.v1beta1.ListFuncsResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    since: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tail: jspb.Message.getFieldWithDefault(msg, 3, 0),
    follow: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.GetFuncLogsRequest;
  return proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSince(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTail(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSince();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTail();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFollow();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string since = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.getSince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.setSince = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 tail = 3;
 * @return {number}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.getTail = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.setTail = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool follow = 4;
 * @return {boolean}
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.getFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncLogsRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncLogsRequest.prototype.setFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.GetFuncRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    view: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncRequest}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.GetFuncRequest;
  return proto.fonoster.funcs.v1beta1.GetFuncRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncRequest}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.fonoster.common.v1beta1.View} */ (reader.readEnum());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.GetFuncRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.GetFuncRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getView();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fonoster.common.v1beta1.View view = 2;
 * @return {!proto.fonoster.common.v1beta1.View}
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.getView = function() {
  return /** @type {!proto.fonoster.common.v1beta1.View} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.fonoster.common.v1beta1.View} value
 * @return {!proto.fonoster.funcs.v1beta1.GetFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.GetFuncRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.DeployFuncRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schedule: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limits: (f = msg.getLimits()) && proto.fonoster.funcs.v1beta1.Resource.toObject(includeInstance, f),
    requests: (f = msg.getRequests()) && proto.fonoster.funcs.v1beta1.Resource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.DeployFuncRequest;
  return proto.fonoster.funcs.v1beta1.DeployFuncRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 3:
      var value = new proto.fonoster.funcs.v1beta1.Resource;
      reader.readMessage(value,proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    case 4:
      var value = new proto.fonoster.funcs.v1beta1.Resource;
      reader.readMessage(value,proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader);
      msg.setRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.DeployFuncRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getRequests();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string schedule = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.setSchedule = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Resource limits = 3;
 * @return {?proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.getLimits = function() {
  return /** @type{?proto.fonoster.funcs.v1beta1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.funcs.v1beta1.Resource, 3));
};


/**
 * @param {?proto.fonoster.funcs.v1beta1.Resource|undefined} value
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
*/
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Resource requests = 4;
 * @return {?proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.getRequests = function() {
  return /** @type{?proto.fonoster.funcs.v1beta1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.funcs.v1beta1.Resource, 4));
};


/**
 * @param {?proto.fonoster.funcs.v1beta1.Resource|undefined} value
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
*/
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.setRequests = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.funcs.v1beta1.DeployFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.clearRequests = function() {
  return this.setRequests(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.funcs.v1beta1.DeployFuncRequest.prototype.hasRequests = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.DeleteFuncRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest}
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.DeleteFuncRequest;
  return proto.fonoster.funcs.v1beta1.DeleteFuncRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest}
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.DeleteFuncRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.DeleteFuncRequest} returns this
 */
proto.fonoster.funcs.v1beta1.DeleteFuncRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest;
  return proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string func_name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest} returns this
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenRequest.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse;
  return proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse} returns this
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse} returns this
 */
proto.fonoster.funcs.v1beta1.CreateRegistryTokenResponse.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.Func.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.Func} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.Func.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    invocationCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    replicas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    availableReplicas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    limits: (f = msg.getLimits()) && proto.fonoster.funcs.v1beta1.Resource.toObject(includeInstance, f),
    requests: (f = msg.getRequests()) && proto.fonoster.funcs.v1beta1.Resource.toObject(includeInstance, f),
    schedule: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.Func}
 */
proto.fonoster.funcs.v1beta1.Func.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.Func;
  return proto.fonoster.funcs.v1beta1.Func.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.Func} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.Func}
 */
proto.fonoster.funcs.v1beta1.Func.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvocationCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReplicas(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailableReplicas(value);
      break;
    case 6:
      var value = new proto.fonoster.funcs.v1beta1.Resource;
      reader.readMessage(value,proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    case 7:
      var value = new proto.fonoster.funcs.v1beta1.Resource;
      reader.readMessage(value,proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader);
      msg.setRequests(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.Func.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.Func} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.Func.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInvocationCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReplicas();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAvailableReplicas();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getRequests();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 invocation_count = 3;
 * @return {number}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getInvocationCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setInvocationCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 replicas = 4;
 * @return {number}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 available_replicas = 5;
 * @return {number}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getAvailableReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setAvailableReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Resource limits = 6;
 * @return {?proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getLimits = function() {
  return /** @type{?proto.fonoster.funcs.v1beta1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.funcs.v1beta1.Resource, 6));
};


/**
 * @param {?proto.fonoster.funcs.v1beta1.Resource|undefined} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
*/
proto.fonoster.funcs.v1beta1.Func.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Resource requests = 7;
 * @return {?proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getRequests = function() {
  return /** @type{?proto.fonoster.funcs.v1beta1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.funcs.v1beta1.Resource, 7));
};


/**
 * @param {?proto.fonoster.funcs.v1beta1.Resource|undefined} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
*/
proto.fonoster.funcs.v1beta1.Func.prototype.setRequests = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.clearRequests = function() {
  return this.setRequests(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.hasRequests = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string schedule = 8;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.Func.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.Func} returns this
 */
proto.fonoster.funcs.v1beta1.Func.prototype.setSchedule = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    memory: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cpu: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.Resource;
  return proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.Resource}
 */
proto.fonoster.funcs.v1beta1.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemory();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCpu();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string memory = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.getMemory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.Resource} returns this
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.setMemory = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cpu = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.getCpu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.Resource} returns this
 */
proto.fonoster.funcs.v1beta1.Resource.prototype.setCpu = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.FuncLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.FuncLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.FuncLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog}
 */
proto.fonoster.funcs.v1beta1.FuncLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.FuncLog;
  return proto.fonoster.funcs.v1beta1.FuncLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.FuncLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog}
 */
proto.fonoster.funcs.v1beta1.FuncLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.FuncLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.FuncLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.FuncLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog} returns this
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string instance = 2;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.getInstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog} returns this
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.setInstance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog} returns this
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.FuncLog} returns this
 */
proto.fonoster.funcs.v1beta1.FuncLog.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.funcs.v1beta1.DeployStream.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.funcs.v1beta1.DeployStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.funcs.v1beta1.DeployStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeployStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.funcs.v1beta1.DeployStream}
 */
proto.fonoster.funcs.v1beta1.DeployStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.funcs.v1beta1.DeployStream;
  return proto.fonoster.funcs.v1beta1.DeployStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.funcs.v1beta1.DeployStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.funcs.v1beta1.DeployStream}
 */
proto.fonoster.funcs.v1beta1.DeployStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.funcs.v1beta1.DeployStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.funcs.v1beta1.DeployStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.funcs.v1beta1.DeployStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.funcs.v1beta1.DeployStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.fonoster.funcs.v1beta1.DeployStream.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.funcs.v1beta1.DeployStream} returns this
 */
proto.fonoster.funcs.v1beta1.DeployStream.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.fonoster.funcs.v1beta1);
